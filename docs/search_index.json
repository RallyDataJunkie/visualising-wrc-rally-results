[["index.html", "Visualising WRC Rally Timing and Results Data A RallyDataJunkie Adventure Index", " Visualising WRC Rally Timing and Results Data A RallyDataJunkie Adventure Tony Hirst Index "],["introduction.html", "1 Introduction", " 1 Introduction For fans of WRC, the live timing data screens as well as results from ewrc-results.com provide up-to-date information about timing and results over the course of an event weekend, as well as a historical results for the current season (WRC) as well as back into the mists of time (ewrc-results). In this recipe collection, I’ll describe various ways of visualising WRC rally results and timing data using data retrieved from the WRC results API. Many of the techniques should also apply directly to data retreived from other services, such as ewrc-results.com if the data is appropriately represented. "],["accessing-data-from-the-wrc-live-timing-api.html", "2 Accessing Data from the WRC Live Timing API 2.1 Current Season Rallies 2.2 Itinerary Lookup 2.3 Competitor Details 2.4 Penalties and Retirements 2.5 Results and Stage Winner 2.6 Stage Times 2.7 Split Times", " 2 Accessing Data from the WRC Live Timing API We can get rally details, timing and results data from the WRC live timing service JSON API. 2.1 Current Season Rallies To start with, let’s see what rallies are scheduled for the current, active season. The jsonlite::fromJSON() will retrieve a JSON (JavaScript Object Notation) file from a URL and attempt to unpack it into an R dataframe: library(jsonlite) library(stringr) library(dplyr) get_active_season = function(active_season_url=&quot;https://api.wrc.com/contel-page/83388/calendar/active-season/&quot;) { jsonlite::fromJSON(active_season_url)$rallyEvents$items } s = get_active_season() # Preview the column names of the resulting dataframe colnames(s) ## [1] &quot;id&quot; &quot;name&quot; &quot;active&quot; &quot;jwrc&quot; &quot;deleted&quot; ## [6] &quot;rally&quot; &quot;status&quot; &quot;pageInfo&quot; &quot;pageResult&quot; &quot;eventDays&quot; ## [11] &quot;winner&quot; Let’s preview the contents of a couple of those columns: # The tidyr / magrittr pipe syntax makes things easier to read s %&gt;% select(c(&#39;id&#39;, &#39;name&#39;)) %&gt;% head() ## id name ## 1 1695 WRC Rallye Monte-Carlo ## 2 1745 WRC Arctic Rally Finland Powered by CapitalBox ## 3 1696 WRC Croatia Rally ## 4 1698 WRC Vodafone Rally de Portugal ## 5 1704 WRC Rally Italia Sardegna ## 6 1709 WRC Safari Rally Kenya We can search the name column to find the unique identifier value for a particular event: eventId = s[s[&#39;name&#39;]==&#39;WRC Arctic Rally Finland Powered by CapitalBox&#39;,&#39;id&#39;] eventId ## [1] 1745 Or we can be more generic with a regular expression lookup: get_eventId_from_name = function(season, name){ season[str_detect(season$name, regex(name, ignore_case = T)), &#39;id&#39;] } get_eventId_from_name(s, &#39;arctic&#39;) ## [1] 1745 2.2 Itinerary Lookup We can make another call to the WRC API to look up the itinerary for the event. Each leg of the event corresponds to a particular day: results_api = &#39;https://api.wrc.com/results-api&#39; get_itinerary = function(eventId) { jsonlite::fromJSON(paste0(results_api,&quot;/rally-event/&quot;, eventId, &quot;/itinerary&quot;))$itineraryLegs } itinerary = get_itinerary(eventId) itinerary ## itinerarySections ## 1 7527, 7564, 7563, 7562, 7531, 170, 170, 170, 170, 170, NA, 1747, 1747, 1747, NA, TimeControl, TimeControl, StageStart, FlyingFinish, RegroupIn, TC0, TC1, SS1, SF1, TC1A, Start ( Santasport, Rovaniemi ), Sarriojärvi, Sarriojärvi 1 (Live TV), Sarriojärvi 1 (Live TV), Regroup IN, Minute, Minute, Minute, Tenth, Minute, NA, 77.79, 31.05, NA, 31.57, NA, 01:32:00, 00:06:00, NA, 01:20:00, NA, 5520000, 360000, NA, 4800000, 2021-02-26T11:30:00, 2021-02-26T13:02:00, 2021-02-26T13:08:00, NA, 2021-02-26T14:28:00, 2021-02-26T13:30:00+02:00, 2021-02-26T15:02:00+02:00, 2021-02-26T15:08:00+02:00, NA, 2021-02-26T16:28:00+02:00, Completed, Completed, Completed, Completed, Completed, All, All, None, None, All, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, 7532, 7561, 7560, 7559, 7533, 7526, 7535, 7534, 170, 170, 170, 170, 170, 170, 170, 170, NA, 1743, 1743, 1743, NA, NA, NA, NA, RegroupOut, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TimeControl, TimeControl, TC1B, TC2, SS2, SF2, TC2A, TC2B, TC2C, TC2D, Regroup OUT, Sarriojärvi, Sarriojärvi 2 (Live TV), Sarriojärvi 2 (Live TV), Parc Fermé &amp; Technical Zone IN, Parc Fermé &amp; Technical Zone Santasport, Service OUT, Finish DAY 1 /Parc Fermé 1 Sampokeskus, Minute, Minute, Minute, Tenth, Minute, Minute, Minute, Minute, 0, 10.23, 31.05, NA, 64.62, 0, 0, 2.83, 01:40:00, 00:24:00, 00:06:00, NA, 01:30:00, 00:10:00, 00:45:00, 00:30:00, 6000000, 1440000, 360000, NA, 5400000, 600000, 2700000, 1800000, 2021-02-26T16:08:00, 2021-02-26T16:32:00, 2021-02-26T16:38:00, NA, 2021-02-26T18:08:00, 2021-02-26T18:18:00, 2021-02-26T19:03:00, 2021-02-26T19:33:00, 2021-02-26T18:08:00+02:00, 2021-02-26T18:32:00+02:00, 2021-02-26T18:38:00+02:00, NA, 2021-02-26T20:08:00+02:00, 2021-02-26T20:18:00+02:00, 2021-02-26T21:03:00+02:00, 2021-02-26T21:33:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, None, All, None, None, All, None, None, None, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 1747, 170, 1, Sarriojärvi 1 (Live TV), 31.05, Completed, SpecialStage, Tenth, TRUE, SS1, 1743, 170, 2, Sarriojärvi 2 (Live TV), 31.05, Completed, SpecialStage, Tenth, TRUE, SS2, 733, 734, 320, 320, 1, 2, Section 1, Section 2 ## 2 7530, 7529, 7528, 7558, 7557, 7556, 7555, 7554, 7553, 7565, 7536, 7550, 7524, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, NA, NA, NA, 1750, 1750, 1750, 1751, 1751, 1751, 1748, 1748, 1748, NA, TimeControl, TimeControl, TimeControl, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, RegroupIn, TC2E, TC2F, TC2G, TC3, SS3, SF3, TC4, SS4, SF4, TC5, SS5, SF5, TC5A, Parc Fermé OUT, Service IN, Service OUT , Mustalampi, Mustalampi 1, Mustalampi 1, Kaihuavaara, Kaihuavaara 1 (Live TV), Kaihuavaara 1 (Live TV), Siikakämä, Siikakämä 1, Siikakämä 1, Regroup &amp; Technical Zone IN, Minute, Minute, Minute, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, 0, 2.7, 0, 37.03, 24.43, NA, 28.96, 19.91, NA, 50.79, 27.68, NA, 37.57, NA, 00:15:00, 00:15:00, 01:00:00, 00:03:00, NA, 01:24:00, 00:06:00, NA, 01:27:00, 00:03:00, NA, 01:12:00, NA, 900000, 900000, 3600000, 180000, NA, 5040000, 360000, NA, 5220000, 180000, NA, 4320000, 2021-02-27T05:35:00, 2021-02-27T05:50:00, 2021-02-27T06:05:00, 2021-02-27T07:05:00, 2021-02-27T07:08:00, NA, 2021-02-27T08:32:00, 2021-02-27T08:38:00, NA, 2021-02-27T10:05:00, 2021-02-27T10:08:00, NA, 2021-02-27T11:20:00, 2021-02-27T07:35:00+02:00, 2021-02-27T07:50:00+02:00, 2021-02-27T08:05:00+02:00, 2021-02-27T09:05:00+02:00, 2021-02-27T09:08:00+02:00, NA, 2021-02-27T10:32:00+02:00, 2021-02-27T10:38:00+02:00, NA, 2021-02-27T12:05:00+02:00, 2021-02-27T12:08:00+02:00, NA, 2021-02-27T13:20:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Late, All, All, All, None, None, All, None, None, All, None, None, All, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 7512, 7522, 7549, 7548, 7547, 7546, 7545, 7544, 7543, 7542, 7541, 7521, 7520, 7519, 7518, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, NA, NA, 1745, 1745, 1745, 1744, 1744, 1744, 1742, 1742, 1742, NA, NA, NA, NA, RegroupOut, TimeControl, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TimeControl, TimeControl, TC5B, TC5C, TC6, SS6, SF6, TC7, SS7, SF7, TC8, SS8, SF8, TC8A, TC8B, TC8C, TC8D, Regroup &amp; Technical Zone OUT - Service IN, Service OUT, Mustalampi, Mustalampi 2, Mustalampi 2, Kaihuavaara, Kaihuavaara 2 (Live TV), Kaihuavaara 2 (Live TV), Siikakämä, Siikakämä 2, Siikakämä 2, Parc Fermé &amp; Technical Zone IN, Parc Fermé &amp; Technical Zone Santasport, Service Out , Finish DAY 2 /Parc Fermé 2 Sampokeskus, Minute, Minute, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Minute, Minute, 0, NA, 37.03, 24.43, NA, 28.96, 19.91, NA, 50.79, 27.68, NA, 37.57, 0, 0, 2.83, 00:45:00, 00:30:00, 01:00:00, 00:03:00, NA, 01:24:00, 00:06:00, NA, 01:27:00, 00:03:00, NA, 01:20:00, 00:10:00, 00:45:00, 00:30:00, 2700000, 1800000, 3600000, 180000, NA, 5040000, 360000, NA, 5220000, 180000, NA, 4800000, 600000, 2700000, 1800000, 2021-02-27T12:05:00, 2021-02-27T12:35:00, 2021-02-27T13:35:00, 2021-02-27T13:38:00, NA, 2021-02-27T15:02:00, 2021-02-27T15:08:00, NA, 2021-02-27T16:35:00, 2021-02-27T16:38:00, NA, 2021-02-27T17:58:00, 2021-02-27T18:08:00, 2021-02-27T18:53:00, 2021-02-27T19:23:00, 2021-02-27T14:05:00+02:00, 2021-02-27T14:35:00+02:00, 2021-02-27T15:35:00+02:00, 2021-02-27T15:38:00+02:00, NA, 2021-02-27T17:02:00+02:00, 2021-02-27T17:08:00+02:00, NA, 2021-02-27T18:35:00+02:00, 2021-02-27T18:38:00+02:00, NA, 2021-02-27T19:58:00+02:00, 2021-02-27T20:08:00+02:00, 2021-02-27T20:53:00+02:00, 2021-02-27T21:23:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, None, None, All, None, None, All, None, None, All, None, None, All, None, None, None, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 1750, 1751, 1748, 170, 170, 170, 3, 4, 5, Mustalampi 1, Kaihuavaara 1 (Live TV), Siikakämä 1, 24.43, 19.91, 27.68, Completed, Completed, Completed, SpecialStage, SpecialStage, SpecialStage, Tenth, Tenth, Tenth, TRUE, TRUE, TRUE, SS3, SS4, SS5, 1745, 1744, 1742, 170, 170, 170, 6, 7, 8, Mustalampi 2, Kaihuavaara 2 (Live TV), Siikakämä 2, 24.43, 19.91, 27.68, Completed, Completed, Completed, SpecialStage, SpecialStage, SpecialStage, Tenth, Tenth, Tenth, TRUE, TRUE, TRUE, SS6, SS7, SS8, 735, 736, 319, 319, 3, 4, Section 3, Section 4 ## 3 7517, 7516, 7515, 7540, 7539, 7538, 7514, 170, 170, 170, 170, 170, 170, 170, NA, NA, NA, 1746, 1746, 1746, NA, TimeControl, TimeControl, TimeControl, TimeControl, StageStart, FlyingFinish, RegroupIn, TC8E, TC8F, TC8G, TC9, SS9, SF9, TC9A, Parc Fermé OUT, Service IN, Service OUT, Aittajärvi, Aittajärvi 1 (Live TV), Aittajärvi 1 (Live TV), Regroup &amp; Technical Zone IN, Minute, Minute, Minute, Minute, Minute, Tenth, Minute, 0, 2.7, 0, 29.5, 22.47, NA, 21, NA, 00:15:00, 00:15:00, 00:47:00, 00:06:00, NA, 01:00:00, NA, 900000, 900000, 2820000, 360000, NA, 3600000, 2021-02-28T06:45:00, 2021-02-28T07:00:00, 2021-02-28T07:15:00, 2021-02-28T08:02:00, 2021-02-28T08:08:00, NA, 2021-02-28T09:08:00, 2021-02-28T08:45:00+02:00, 2021-02-28T09:00:00+02:00, 2021-02-28T09:15:00+02:00, 2021-02-28T10:02:00+02:00, 2021-02-28T10:08:00+02:00, NA, 2021-02-28T11:08:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Late, All, All, All, None, None, All, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 7513, 7537, 7551, 7552, 7523, 7525, 170, 170, 170, 170, 170, 170, NA, 1749, 1749, 1749, NA, NA, RegroupOut, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TC9B, TC10, SS10, SF10, TC10A, TC10B, Regroup OUT, Aittajärvi, Aittajärvi 2 (Wolf Power Stage), Aittajärvi 2 (Wolf Power Stage), Holding Area OUT, Finish - Technical Zone/Parc Fermé IN Santasport, Minute, Minute, Minute, Thousandth, Minute, Minute, 0, 29.5, 22.47, NA, NA, 21, 01:17:00, 00:47:00, 00:06:00, NA, NA, 00:50:00, 4620000, 2820000, 360000, NA, NA, 3000000, 2021-02-28T10:25:00, 2021-02-28T11:12:00, 2021-02-28T11:18:00, NA, NA, NA, 2021-02-28T12:25:00+02:00, 2021-02-28T13:12:00+02:00, 2021-02-28T13:18:00+02:00, NA, NA, NA, Completed, Completed, Completed, Completed, Completed, Completed, None, All, None, None, None, Late, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, 1746, 170, 9, Aittajärvi 1 (Live TV), 22.47, Completed, SpecialStage, Tenth, FALSE, SS9, 1749, 170, 10, Aittajärvi 2 (Wolf Power Stage), 22.47, Completed, PowerStage, Thousandth, FALSE, SS10, 737, 738, 318, 318, 5, 6, Section 5, Section 6 ## itineraryLegId itineraryId startListId name legDate ## 1 320 266 523 Friday 26th February 2021-02-26 ## 2 319 266 524 Saturday 27th February 2021-02-27 ## 3 318 266 525 Sunday 28th February 2021-02-28 ## order status ## 1 1 Completed ## 2 2 Completed ## 3 3 Running The startListId can be used alongside the event ID to look up the startlist for a leg. We can order the startlist by start order: get_startlist = function(eventId, startListId) { startlist_url = paste0(results_api, &#39;/rally-event/&#39;, eventId,&#39;/start-list-external/&#39;, startListId) startlist = jsonlite::fromJSON(startlist_url)$startListItems # Order the startlist dataframe by start order startlist %&gt;% arrange(order) } # Example startlist ID # Use a regular expression to find the startlist ID by day startListId = itinerary[str_detect(itinerary$name, regex(&#39;Friday&#39;, ignore_case = T)), &#39;startListId&#39;] startlist = get_startlist(eventId, startListId) startlist %&gt;% head() ## startListItemId startListId entryId startDateTime ## 1 24435 523 21530 2021-02-26T11:30:00 ## 2 24409 523 21531 2021-02-26T11:33:00 ## 3 24410 523 21532 2021-02-26T11:36:00 ## 4 24411 523 21533 2021-02-26T11:39:00 ## 5 24412 523 21534 2021-02-26T11:42:00 ## 6 24413 523 21535 2021-02-26T11:45:00 ## startDateTimeLocal order ## 1 2021-02-26T13:30:00+02:00 1 ## 2 2021-02-26T13:33:00+02:00 2 ## 3 2021-02-26T13:36:00+02:00 3 ## 4 2021-02-26T13:39:00+02:00 4 ## 5 2021-02-26T13:42:00+02:00 5 ## 6 2021-02-26T13:45:00+02:00 6 2.2.1 Leg Sections Within each leg, the itinerary provides information about each section (that is, each “loop”) of the rally. This information is retrieved in form of a dataframe in a standard format. We can use the base R do.call() to call the rbind() function against each row of the dataframe and bind all the dataframes in a specified column into a single dataframe: get_sections = function(itinerary){ sections = do.call(rbind, itinerary$itinerarySections) sections } sections = get_sections(itinerary) sections %&gt;% head() ## controls ## 1 7527, 7564, 7563, 7562, 7531, 170, 170, 170, 170, 170, NA, 1747, 1747, 1747, NA, TimeControl, TimeControl, StageStart, FlyingFinish, RegroupIn, TC0, TC1, SS1, SF1, TC1A, Start ( Santasport, Rovaniemi ), Sarriojärvi, Sarriojärvi 1 (Live TV), Sarriojärvi 1 (Live TV), Regroup IN, Minute, Minute, Minute, Tenth, Minute, NA, 77.79, 31.05, NA, 31.57, NA, 01:32:00, 00:06:00, NA, 01:20:00, NA, 5520000, 360000, NA, 4800000, 2021-02-26T11:30:00, 2021-02-26T13:02:00, 2021-02-26T13:08:00, NA, 2021-02-26T14:28:00, 2021-02-26T13:30:00+02:00, 2021-02-26T15:02:00+02:00, 2021-02-26T15:08:00+02:00, NA, 2021-02-26T16:28:00+02:00, Completed, Completed, Completed, Completed, Completed, All, All, None, None, All, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE ## 2 7532, 7561, 7560, 7559, 7533, 7526, 7535, 7534, 170, 170, 170, 170, 170, 170, 170, 170, NA, 1743, 1743, 1743, NA, NA, NA, NA, RegroupOut, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TimeControl, TimeControl, TC1B, TC2, SS2, SF2, TC2A, TC2B, TC2C, TC2D, Regroup OUT, Sarriojärvi, Sarriojärvi 2 (Live TV), Sarriojärvi 2 (Live TV), Parc Fermé &amp; Technical Zone IN, Parc Fermé &amp; Technical Zone Santasport, Service OUT, Finish DAY 1 /Parc Fermé 1 Sampokeskus, Minute, Minute, Minute, Tenth, Minute, Minute, Minute, Minute, 0, 10.23, 31.05, NA, 64.62, 0, 0, 2.83, 01:40:00, 00:24:00, 00:06:00, NA, 01:30:00, 00:10:00, 00:45:00, 00:30:00, 6000000, 1440000, 360000, NA, 5400000, 600000, 2700000, 1800000, 2021-02-26T16:08:00, 2021-02-26T16:32:00, 2021-02-26T16:38:00, NA, 2021-02-26T18:08:00, 2021-02-26T18:18:00, 2021-02-26T19:03:00, 2021-02-26T19:33:00, 2021-02-26T18:08:00+02:00, 2021-02-26T18:32:00+02:00, 2021-02-26T18:38:00+02:00, NA, 2021-02-26T20:08:00+02:00, 2021-02-26T20:18:00+02:00, 2021-02-26T21:03:00+02:00, 2021-02-26T21:33:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, None, All, None, None, All, None, None, None, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE ## 3 7530, 7529, 7528, 7558, 7557, 7556, 7555, 7554, 7553, 7565, 7536, 7550, 7524, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, NA, NA, NA, 1750, 1750, 1750, 1751, 1751, 1751, 1748, 1748, 1748, NA, TimeControl, TimeControl, TimeControl, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, RegroupIn, TC2E, TC2F, TC2G, TC3, SS3, SF3, TC4, SS4, SF4, TC5, SS5, SF5, TC5A, Parc Fermé OUT, Service IN, Service OUT , Mustalampi, Mustalampi 1, Mustalampi 1, Kaihuavaara, Kaihuavaara 1 (Live TV), Kaihuavaara 1 (Live TV), Siikakämä, Siikakämä 1, Siikakämä 1, Regroup &amp; Technical Zone IN, Minute, Minute, Minute, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, 0, 2.7, 0, 37.03, 24.43, NA, 28.96, 19.91, NA, 50.79, 27.68, NA, 37.57, NA, 00:15:00, 00:15:00, 01:00:00, 00:03:00, NA, 01:24:00, 00:06:00, NA, 01:27:00, 00:03:00, NA, 01:12:00, NA, 900000, 900000, 3600000, 180000, NA, 5040000, 360000, NA, 5220000, 180000, NA, 4320000, 2021-02-27T05:35:00, 2021-02-27T05:50:00, 2021-02-27T06:05:00, 2021-02-27T07:05:00, 2021-02-27T07:08:00, NA, 2021-02-27T08:32:00, 2021-02-27T08:38:00, NA, 2021-02-27T10:05:00, 2021-02-27T10:08:00, NA, 2021-02-27T11:20:00, 2021-02-27T07:35:00+02:00, 2021-02-27T07:50:00+02:00, 2021-02-27T08:05:00+02:00, 2021-02-27T09:05:00+02:00, 2021-02-27T09:08:00+02:00, NA, 2021-02-27T10:32:00+02:00, 2021-02-27T10:38:00+02:00, NA, 2021-02-27T12:05:00+02:00, 2021-02-27T12:08:00+02:00, NA, 2021-02-27T13:20:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Late, All, All, All, None, None, All, None, None, All, None, None, All, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE ## 4 7512, 7522, 7549, 7548, 7547, 7546, 7545, 7544, 7543, 7542, 7541, 7521, 7520, 7519, 7518, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, NA, NA, 1745, 1745, 1745, 1744, 1744, 1744, 1742, 1742, 1742, NA, NA, NA, NA, RegroupOut, TimeControl, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TimeControl, TimeControl, TC5B, TC5C, TC6, SS6, SF6, TC7, SS7, SF7, TC8, SS8, SF8, TC8A, TC8B, TC8C, TC8D, Regroup &amp; Technical Zone OUT - Service IN, Service OUT, Mustalampi, Mustalampi 2, Mustalampi 2, Kaihuavaara, Kaihuavaara 2 (Live TV), Kaihuavaara 2 (Live TV), Siikakämä, Siikakämä 2, Siikakämä 2, Parc Fermé &amp; Technical Zone IN, Parc Fermé &amp; Technical Zone Santasport, Service Out , Finish DAY 2 /Parc Fermé 2 Sampokeskus, Minute, Minute, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Tenth, Minute, Minute, Minute, Minute, 0, NA, 37.03, 24.43, NA, 28.96, 19.91, NA, 50.79, 27.68, NA, 37.57, 0, 0, 2.83, 00:45:00, 00:30:00, 01:00:00, 00:03:00, NA, 01:24:00, 00:06:00, NA, 01:27:00, 00:03:00, NA, 01:20:00, 00:10:00, 00:45:00, 00:30:00, 2700000, 1800000, 3600000, 180000, NA, 5040000, 360000, NA, 5220000, 180000, NA, 4800000, 600000, 2700000, 1800000, 2021-02-27T12:05:00, 2021-02-27T12:35:00, 2021-02-27T13:35:00, 2021-02-27T13:38:00, NA, 2021-02-27T15:02:00, 2021-02-27T15:08:00, NA, 2021-02-27T16:35:00, 2021-02-27T16:38:00, NA, 2021-02-27T17:58:00, 2021-02-27T18:08:00, 2021-02-27T18:53:00, 2021-02-27T19:23:00, 2021-02-27T14:05:00+02:00, 2021-02-27T14:35:00+02:00, 2021-02-27T15:35:00+02:00, 2021-02-27T15:38:00+02:00, NA, 2021-02-27T17:02:00+02:00, 2021-02-27T17:08:00+02:00, NA, 2021-02-27T18:35:00+02:00, 2021-02-27T18:38:00+02:00, NA, 2021-02-27T19:58:00+02:00, 2021-02-27T20:08:00+02:00, 2021-02-27T20:53:00+02:00, 2021-02-27T21:23:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Completed, None, None, All, None, None, All, None, None, All, None, None, All, None, None, None, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE ## 5 7517, 7516, 7515, 7540, 7539, 7538, 7514, 170, 170, 170, 170, 170, 170, 170, NA, NA, NA, 1746, 1746, 1746, NA, TimeControl, TimeControl, TimeControl, TimeControl, StageStart, FlyingFinish, RegroupIn, TC8E, TC8F, TC8G, TC9, SS9, SF9, TC9A, Parc Fermé OUT, Service IN, Service OUT, Aittajärvi, Aittajärvi 1 (Live TV), Aittajärvi 1 (Live TV), Regroup &amp; Technical Zone IN, Minute, Minute, Minute, Minute, Minute, Tenth, Minute, 0, 2.7, 0, 29.5, 22.47, NA, 21, NA, 00:15:00, 00:15:00, 00:47:00, 00:06:00, NA, 01:00:00, NA, 900000, 900000, 2820000, 360000, NA, 3600000, 2021-02-28T06:45:00, 2021-02-28T07:00:00, 2021-02-28T07:15:00, 2021-02-28T08:02:00, 2021-02-28T08:08:00, NA, 2021-02-28T09:08:00, 2021-02-28T08:45:00+02:00, 2021-02-28T09:00:00+02:00, 2021-02-28T09:15:00+02:00, 2021-02-28T10:02:00+02:00, 2021-02-28T10:08:00+02:00, NA, 2021-02-28T11:08:00+02:00, Completed, Completed, Completed, Completed, Completed, Completed, Completed, Late, All, All, All, None, None, All, NoRounding, NoRounding, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE ## 6 7513, 7537, 7551, 7552, 7523, 7525, 170, 170, 170, 170, 170, 170, NA, 1749, 1749, 1749, NA, NA, RegroupOut, TimeControl, StageStart, FlyingFinish, TimeControl, TimeControl, TC9B, TC10, SS10, SF10, TC10A, TC10B, Regroup OUT, Aittajärvi, Aittajärvi 2 (Wolf Power Stage), Aittajärvi 2 (Wolf Power Stage), Holding Area OUT, Finish - Technical Zone/Parc Fermé IN Santasport, Minute, Minute, Minute, Thousandth, Minute, Minute, 0, 29.5, 22.47, NA, NA, 21, 01:17:00, 00:47:00, 00:06:00, NA, NA, 00:50:00, 4620000, 2820000, 360000, NA, NA, 3000000, 2021-02-28T10:25:00, 2021-02-28T11:12:00, 2021-02-28T11:18:00, NA, NA, NA, 2021-02-28T12:25:00+02:00, 2021-02-28T13:12:00+02:00, 2021-02-28T13:18:00+02:00, NA, NA, NA, Completed, Completed, Completed, Completed, Completed, Completed, None, All, None, None, None, Late, NoRounding, NoRounding, RoundToClosestMinute, NoRounding, NoRounding, NoRounding, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE ## stages ## 1 1747, 170, 1, Sarriojärvi 1 (Live TV), 31.05, Completed, SpecialStage, Tenth, TRUE, SS1 ## 2 1743, 170, 2, Sarriojärvi 2 (Live TV), 31.05, Completed, SpecialStage, Tenth, TRUE, SS2 ## 3 1750, 1751, 1748, 170, 170, 170, 3, 4, 5, Mustalampi 1, Kaihuavaara 1 (Live TV), Siikakämä 1, 24.43, 19.91, 27.68, Completed, Completed, Completed, SpecialStage, SpecialStage, SpecialStage, Tenth, Tenth, Tenth, TRUE, TRUE, TRUE, SS3, SS4, SS5 ## 4 1745, 1744, 1742, 170, 170, 170, 6, 7, 8, Mustalampi 2, Kaihuavaara 2 (Live TV), Siikakämä 2, 24.43, 19.91, 27.68, Completed, Completed, Completed, SpecialStage, SpecialStage, SpecialStage, Tenth, Tenth, Tenth, TRUE, TRUE, TRUE, SS6, SS7, SS8 ## 5 1746, 170, 9, Aittajärvi 1 (Live TV), 22.47, Completed, SpecialStage, Tenth, FALSE, SS9 ## 6 1749, 170, 10, Aittajärvi 2 (Wolf Power Stage), 22.47, Completed, PowerStage, Thousandth, FALSE, SS10 ## itinerarySectionId itineraryLegId order name ## 1 733 320 1 Section 1 ## 2 734 320 2 Section 2 ## 3 735 319 3 Section 3 ## 4 736 319 4 Section 4 ## 5 737 318 5 Section 5 ## 6 738 318 6 Section 6 In the sections dataframe we have one row per section. We notice again the presence of columns that use dataframes to “nest” subdataframes within each row relating to to timing controls and stages associated with each leg. 2.2.2 Time Controls We can look up information about each time control from data provided as part of the itinerary lookup using the same trick as before to “unroll” the contents of each dataframe in a specified column into a single dataframe. An alternative to the do.call() approach is to use a tidy approach and use the dplyr::bind_rows() function on the sections$controls column values via a pipe: get_controls = function(sections){ controls = sections$controls %&gt;% bind_rows() controls } controls = get_controls(sections) controls %&gt;% head(2) ## controlId eventId stageId type code location ## 1 7527 170 NA TimeControl TC0 Start ( Santasport, Rovaniemi ) ## 2 7564 170 1747 TimeControl TC1 Sarriojärvi ## timingPrecision distance targetDuration targetDurationMs firstCarDueDateTime ## 1 Minute NA &lt;NA&gt; NA 2021-02-26T11:30:00 ## 2 Minute 77.79 01:32:00 5520000 2021-02-26T13:02:00 ## firstCarDueDateTimeLocal status controlPenalties roundingPolicy locked ## 1 2021-02-26T13:30:00+02:00 Completed All NoRounding TRUE ## 2 2021-02-26T15:02:00+02:00 Completed All NoRounding TRUE 2.2.3 Stage Details We can pull stage details from the dataframes contained in the sections dataframe from the itinerary lookup: get_stages = function(sections){ stages = sections$stages %&gt;% bind_rows() stages } stages = get_stages(sections) stages %&gt;% head() ## stageId eventId number name distance status ## 1 1747 170 1 Sarriojärvi 1 (Live TV) 31.05 Completed ## 2 1743 170 2 Sarriojärvi 2 (Live TV) 31.05 Completed ## 3 1750 170 3 Mustalampi 1 24.43 Completed ## 4 1751 170 4 Kaihuavaara 1 (Live TV) 19.91 Completed ## 5 1748 170 5 Siikakämä 1 27.68 Completed ## 6 1745 170 6 Mustalampi 2 24.43 Completed ## stageType timingPrecision locked code ## 1 SpecialStage Tenth TRUE SS1 ## 2 SpecialStage Tenth TRUE SS2 ## 3 SpecialStage Tenth TRUE SS3 ## 4 SpecialStage Tenth TRUE SS4 ## 5 SpecialStage Tenth TRUE SS5 ## 6 SpecialStage Tenth TRUE SS6 We can get a list of stage IDs from the stageId column (stages$stageId); or we can create a lookup from code to stage ID: # https://stackoverflow.com/a/19265431/454773 get_stages_lookup = function(stages){ stages_lookup = stages$stageId names(stages_lookup) = stages$code stages_lookup } stages_lookup = get_stages_lookup(stages) stages_lookup ## SS1 SS2 SS3 SS4 SS5 SS6 SS7 SS8 SS9 SS10 ## 1747 1743 1750 1751 1748 1745 1744 1742 1746 1749 # Lookup particular stage ID by stage code #stages_lookup[[&#39;SS2&#39;]] From the stages table, we can get the identifier for a particular stage, either by code (for example, “SS3”) or by (partial) name match: ssnum = &#39;SS3&#39; get_stage_id = function(stages, sname, typ=&#39;code&#39;){ # code, name if (typ==&#39;code&#39;) stageId = stages[stages[typ] == sname, &#39;stageId&#39;] else stageId = stages[stringr::str_detect(stages[[typ]], sname), &#39;stageId&#39;] stageId } stageId = get_stage_id(stages, &#39;Mustalampi 1&#39;, &#39;name&#39;) stageId ## [1] 1750 And the stage distance and name: get_stage_info = function(stages, sid, typ=&#39;stageId&#39;, clean=TRUE){ # stageId, code name=stages[stages[typ] == sid, &#39;name&#39;] distance=stages[stages[typ] == sid, &#39;distance&#39;] if (clean) stringr::str_replace(name, &#39; (Live TV)&#39;, &#39;&#39;) c(name=name, distance=distance) } get_stage_info(stages, stageId) ## name distance ## &quot;Mustalampi 1&quot; &quot;24.43&quot; 2.3 Competitor Details Details of car entries for each event can be retrieved from the WRC live timing API given an event ID. get_rally_entries = function(eventId) { cars_url = paste0(results_api, &#39;/rally-event/&#39;, eventId,&#39;/cars&#39;) jsonlite::fromJSON(cars_url) } entries = get_rally_entries(eventId) # $driver, $codriver, $manufacturer, $entrant, $group, $eventClasses # $identifier, $vehicleModel, $eligibility, $status entries %&gt;% head(2) ## driver.personId driver.countryId driver.country.countryId ## 1 670 76 76 ## 2 534 235 235 ## driver.country.name driver.country.iso2 ## 1 France FR ## 2 United Kingdom of Great Britain and Northern Ireland GB ## driver.country.iso3 driver.firstName driver.lastName driver.abbvName ## 1 FRA Sébastien OGIER S. OGIER ## 2 GBR Elfyn EVANS E. EVANS ## driver.fullName driver.code codriver.personId codriver.countryId ## 1 Sébastien OGIER OGI 3027 76 ## 2 Elfyn EVANS EVA 553 235 ## codriver.country.countryId ## 1 76 ## 2 235 ## codriver.country.name codriver.country.iso2 ## 1 France FR ## 2 United Kingdom of Great Britain and Northern Ireland GB ## codriver.country.iso3 codriver.firstName codriver.lastName codriver.abbvName ## 1 FRA Julien INGRASSIA J. INGRASSIA ## 2 GBR Scott MARTIN S. MARTIN ## codriver.fullName codriver.code manufacturer.manufacturerId manufacturer.name ## 1 Julien INGRASSIA ING 84 Toyota ## 2 Scott MARTIN MAR 84 Toyota ## manufacturer.logoFilename entrant.entrantId entrant.name ## 1 toyota 91 TOYOTA GAZOO RACING WRT ## 2 toyota 91 TOYOTA GAZOO RACING WRT ## entrant.logoFilename group.groupId group.name eventClasses tags entryId ## 1 &lt;NA&gt; 10 WRC 640, 170, RC1 NULL 21530 ## 2 &lt;NA&gt; 10 WRC 640, 170, RC1 NULL 21531 ## eventId driverId codriverId manufacturerId entrantId groupId entryListOrder ## 1 170 670 3027 84 91 10 1 ## 2 170 534 553 84 91 10 2 ## identifier vehicleModel eligibility priority status tyreManufacturer ## 1 1 Yaris WRC M P1 Rejoined None ## 2 33 Yaris WRC M P1 Entry None We can index the entries by group to find all the WRC car entryId values: entries[entries$group$name==&#39;WRC&#39;, &#39;entryId&#39;] ## [1] 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 21540 21541 ## [13] 21542 Detailed information for each driver and codriver can be found in the corresponding sub-dataframes. For example, we can look up the details for each driver, noting in this case that we need to column bind (cbind()) the subdataframes to produce the collated dataframe of driver details: get_drivers = function(entries){ drivers = do.call(cbind, entries$driver) drivers } drivers = get_drivers(entries) drivers %&gt;% head(2) ## personId countryId country.countryId ## 1 670 76 76 ## 2 534 235 235 ## country.name country.iso2 ## 1 France FR ## 2 United Kingdom of Great Britain and Northern Ireland GB ## country.iso3 firstName lastName abbvName fullName code ## 1 FRA Sébastien OGIER S. OGIER Sébastien OGIER OGI ## 2 GBR Elfyn EVANS E. EVANS Elfyn EVANS EVA We can similarly obtain data for the codrivers: #codrivers = do.call(cbind, entries$codriver) # Again, there is a tidyverse approach with dplyr::bind_cols() get_codrivers = function(entries){ codrivers = bind_cols(entries$codriver) codrivers } codrivers = get_codrivers(entries) codrivers %&gt;% head(2) ## personId countryId country.countryId ## 1 3027 76 76 ## 2 553 235 235 ## country.name country.iso2 ## 1 France FR ## 2 United Kingdom of Great Britain and Northern Ireland GB ## country.iso3 firstName lastName abbvName fullName code ## 1 FRA Julien INGRASSIA J. INGRASSIA Julien INGRASSIA ING ## 2 GBR Scott MARTIN S. MARTIN Scott MARTIN MAR We can conveniently obtain the identifier for a particular driver or codriver by searching against their name or three letter code: get_person_id = function(drivers, sname, typ=&#39;fullName&#39;){ # code, fullName if (typ==&#39;code&#39;) driverId = drivers[drivers[typ]==sname, &#39;personId&#39;] else driverId = drivers[str_detect(drivers[[typ]], regex(sname, ignore_case = T)), &#39;personId&#39;] driverId } ogierDriverId = get_person_id(drivers, &#39;ogier&#39;) ogierDriverId ## [1] 670 From the driver person identifier we can get the entry identifier for the rally we’re exploring: ogierEntryId = entries[entries[&#39;driverId&#39;]==ogierDriverId, &#39;entryId&#39;] ogierEntryId ## [1] 21530 We can manually create a dataframe containing essential fields from the original cars dataframe and the dataframes contained within it: get_car_data = function(entries){ cols = c(&#39;entryId&#39;, &#39;driverId&#39;, &#39;codriverId&#39;,&#39;manufacturerId&#39;, &#39;vehicleModel&#39;,&#39;eligibility&#39;, &#39;classname&#39;,&#39;manufacturer&#39;, &#39;entrantname&#39;, &#39;groupname&#39;, &#39;drivername&#39;, &#39;code&#39;, &#39;driverfullname&#39;, &#39;codrivername&#39;,&#39;codriverfullname&#39; ) entries = entries %&gt;% rowwise() %&gt;% mutate(classname = eventClasses$name) %&gt;% mutate(manufacturer = manufacturer$name) %&gt;% mutate(entrantname = entrant$name) %&gt;% mutate(groupname = group$name) %&gt;% mutate(drivername = driver$abbvName) %&gt;% mutate(driverfullname = driver$fullName) %&gt;% mutate(codrivername = codriver$abbvName) %&gt;% mutate(codriverfullname = codriver$fullName) %&gt;% mutate(code = driver$code) %&gt;% select(all_of(cols)) # If we don&#39;t cast, it&#39;s a non-rankable rowwise df as.data.frame(entries) } get_car_data(entries) %&gt;% head(2) ## entryId driverId codriverId manufacturerId vehicleModel eligibility classname ## 1 21530 670 3027 84 Yaris WRC M RC1 ## 2 21531 534 553 84 Yaris WRC M RC1 ## manufacturer entrantname groupname drivername code ## 1 Toyota TOYOTA GAZOO RACING WRT WRC S. OGIER OGI ## 2 Toyota TOYOTA GAZOO RACING WRT WRC E. EVANS EVA ## driverfullname codrivername codriverfullname ## 1 Sébastien OGIER J. INGRASSIA Julien INGRASSIA ## 2 Elfyn EVANS S. MARTIN Scott MARTIN 2.4 Penalties and Retirements We can look up penalties from an event ID: get_penalties = function(eventId) { penalties_url = paste0(results_api, &#39;/rally-event/&#39;, eventId, &#39;/penalties&#39;) jsonlite::fromJSON(penalties_url) } get_penalties(eventId) %&gt;% head(2) ## penaltyId controlId entryId penaltyDurationMs penaltyDuration reason ## 1 959 7546 21559 10000 PT10S 1 MIN LATE ## 2 956 7533 21568 10000 PT10S 1 MIN LATE The event ID is also all we need to request a list of retirements: get_retirements = function(eventId) { retirements_url = paste0(results_api, &#39;/rally-event/&#39;, eventId, &#39;/retirements&#39;) jsonlite::fromJSON(retirements_url) } get_retirements(eventId) %&gt;% head(2) ## retirementId controlId entryId reason retirementDateTime ## 1 1802 7562 21547 MECHANICAL 2021-02-26T14:50:00 ## 2 1803 7556 21542 OFF ROAD 2021-02-27T08:01:00 ## retirementDateTimeLocal status ## 1 0001-01-01T00:00:00+00:00 Permanent ## 2 0001-01-01T00:00:00+00:00 Temporary 2.5 Results and Stage Winner As well as retrieving penalties and retirements using just the event ID as a key, we can also retrieve the overall results and the stage winners: get_result = function(eventId) { result_url = paste0(results_api, &#39;/rally-event/&#39;, eventId,&#39;/result&#39;) jsonlite::fromJSON(result_url) } get_result(eventId) %&gt;% head(2) ## entryId stageTimeMs stageTime penaltyTimeMs penaltyTime totalTimeMs ## 1 21536 7429600 PT2H3M49.6S 0 PT0S 7429600 ## 2 21533 7447100 PT2H4M7.1S 0 PT0S 7447100 ## totalTime position diffFirstMs diffFirst diffPrevMs diffPrev ## 1 PT2H3M49.6S 1 0 PT0S 0 PT0S ## 2 PT2H4M7.1S 2 17500 PT17.5S 17500 PT17.5S And for the stage winners: get_stage_winners = function(eventId) { stage_winners_url = paste0(results_api, &#39;/rally-event/&#39;, eventId,&#39;/stage-winners&#39;) jsonlite::fromJSON(stage_winners_url) } get_stage_winners(eventId) %&gt;% head(2) ## stageId entryId stageName elapsedDurationMs elapsedDuration ## 1 1747 21536 Sarriojärvi 1 (Live TV) 957800 00:15:57.8000000 ## 2 1743 21536 Sarriojärvi 2 (Live TV) 952900 00:15:52.9000000 2.6 Stage Times We can get the stage times for each stage on a rally by event and stage ID: get_stage_times = function(eventId, stageId) { stage_times_url = paste0(results_api, &#39;/rally-event/&#39;, eventId, &#39;/stage-times/stage-external/&#39;, stageId) jsonlite::fromJSON(stage_times_url) } stage_times = get_stage_times(eventId, stageId) stage_times %&gt;% head(2) ## stageTimeId stageId entryId elapsedDurationMs elapsedDuration status ## 1 96580 1750 21536 834500 00:13:54.5000000 Completed ## 2 96474 1750 21532 835500 00:13:55.5000000 Completed ## source position diffFirstMs diffFirst diffPrevMs diffPrev ## 1 Default 1 0 00:00:00 0 00:00:00 ## 2 Default 2 1000 00:00:01 1000 00:00:01 2.6.1 Getting Long Stage Times for Multiple Stages It will be convenient to be able to retrieve stage times for multiple stages from one function call. One way of achieving that is to create a function to retrieve the details for a single specified stage that can be applied via a purrr::map() function call applied to the list of stage IDs we want results data for: library(purrr) get_stage_times2 = function(stageId, eventId) { get_stage_times(eventId, stageId) } stagelist = c(1747, 1743) get_multi_stage_times = function(stagelist){ multi_stage_times = stagelist %&gt;% map(get_stage_times2, eventId=eventId) %&gt;% bind_rows() multi_stage_times } multi_stage_times = get_multi_stage_times(stagelist) multi_stage_times %&gt;% tail(2) ## stageTimeId stageId entryId elapsedDurationMs elapsedDuration status ## 109 96321 1743 21573 1950700 00:32:30.7000000 Completed ## 110 96355 1743 21547 NA &lt;NA&gt; DNS ## source position diffFirstMs diffFirst diffPrevMs diffPrev ## 109 Default 54 997800 00:16:37.8000000 245500 00:04:05.5000000 ## 110 Default NA NA &lt;NA&gt; NA &lt;NA&gt; 2.6.2 Getting Wide Stage Times for Multiple Stages We can then widen the stage times for each driver: get_multi_stage_times_wide = function(multi_stage_times){ stage_times_cols = c(&#39;entryId&#39;, &#39;stageId&#39;, &#39;elapsedDurationMs&#39;) multi_stage_times_wide = multi_stage_times %&gt;% select(all_of(stage_times_cols)) %&gt;% mutate(elapsedDurationS = elapsedDurationMs / 1000) %&gt;% select(-elapsedDurationMs) %&gt;% group_by(entryId) %&gt;% tidyr::spread(key = stageId, value = elapsedDurationS) %&gt;% select(c(&#39;entryId&#39;, as.character(stagelist))) multi_stage_times_wide } multi_stage_times_wide = get_multi_stage_times_wide(multi_stage_times) multi_stage_times_wide %&gt;% head(2) ## # A tibble: 2 x 3 ## # Groups: entryId [2] ## entryId `1747` `1743` ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21530 980. 980 ## 2 21531 974. 968. 2.6.3 Getting Wide Stage Positions We can also get the stage positions: get_multi_stage_positions_wide = function(multi_stage_times){ stage_positions_cols = c(&#39;entryId&#39;, &#39;stageId&#39;, &#39;position&#39;) multi_stage_positions_wide = multi_stage_times %&gt;% select(all_of(stage_positions_cols)) %&gt;% group_by(entryId) %&gt;% tidyr::spread(key = stageId, value = position) %&gt;% select(c(&#39;entryId&#39;, as.character(stagelist))) } multi_stage_positions_wide = get_multi_stage_positions_wide(multi_stage_times) multi_stage_positions_wide %&gt;% head(2) ## # A tibble: 2 x 3 ## # Groups: entryId [2] ## entryId `1747` `1743` ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 21530 9 10 ## 2 21531 5 5 2.7 Split Times We can get split times and distance into stage data for each stage given the stage identifier: get_splits = function(eventId, stageId){ splits_url=paste0(results_api, &#39;/rally-event/&#39;, eventId, &#39;/split-times/stage-external/&#39;, stageId) jsonlite::fromJSON(splits_url) } splits = get_splits(eventId, stageId) # $splitPoints # $entrySplitPointTimes This includes handy information about split locations, such as distance into stage. This can also be useful for pace calculations: splits$splitPoints ## splitPointId stageId number distance ## 1 3593 1750 5 23.21 ## 2 3601 1750 2 9.02 ## 3 3615 1750 1 4.83 ## 4 3617 1750 4 20.63 ## 5 3621 1750 3 14.87 We can also view the split point times for each driver: splits$entrySplitPointTimes %&gt;% head(2) ## entryId startDateTime startDateTimeLocal stageTimeDurationMs ## 1 21540 2021-02-27T07:08:00 2021-02-27T09:08:00+02:00 844300 ## 2 21541 2021-02-27T07:11:00 2021-02-27T09:11:00+02:00 864400 ## stageTimeDuration ## 1 00:14:04.3000000 ## 2 00:14:24.4000000 ## splitPointTimes ## 1 123482, 123483, 123486, 123488, 123490, 3615, 3601, 3621, 3617, 3593, 21540, 21540, 21540, 21540, 21540, 161400, 272500, 471600, 692700, 791500, PT2M41.4S, PT4M32.5S, PT7M51.6S, PT11M32.7S, PT13M11.5S, 2021-02-27T07:10:41.4, 2021-02-27T07:12:32.5, 2021-02-27T07:15:51.6, 2021-02-27T07:19:32.7, 2021-02-27T07:21:11.5, 2021-02-27T09:10:41.4+02:00, 2021-02-27T09:12:32.5+02:00, 2021-02-27T09:15:51.6+02:00, 2021-02-27T09:19:32.7+02:00, 2021-02-27T09:21:11.5+02:00 ## 2 123484, 123485, 123487, 123493, 123494, 3615, 3601, 3621, 3617, 3593, 21541, 21541, 21541, 21541, 21541, 165200, 280600, 484700, 710100, 810300, PT2M45.2S, PT4M40.6S, PT8M4.7S, PT11M50.1S, PT13M30.3S, 2021-02-27T07:13:45.2, 2021-02-27T07:15:40.6, 2021-02-27T07:19:04.7, 2021-02-27T07:22:50.1, 2021-02-27T07:24:30.3, 2021-02-27T09:13:45.2+02:00, 2021-02-27T09:15:40.6+02:00, 2021-02-27T09:19:04.7+02:00, 2021-02-27T09:22:50.1+02:00, 2021-02-27T09:24:30.3+02:00 To view the split times for a specific driver, we can index into the dataframe using the driver entryId value: splits$entrySplitPointTimes[splits$entrySplitPointTimes[&#39;entryId&#39;]==ogierEntryId,]$splitPointTimes ## [[1]] ## splitPointTimeId splitPointId entryId elapsedDurationMs elapsedDuration ## 1 123492 3615 21530 161700 PT2M41.7S ## 2 123495 3601 21530 272300 PT4M32.3S ## 3 123499 3621 21530 471300 PT7M51.3S ## 4 123505 3617 21530 690400 PT11M30.4S ## 5 123507 3593 21530 789200 PT13M9.2S ## splitDateTime splitDateTimeLocal ## 1 2021-02-27T07:22:41.7 2021-02-27T09:22:41.7+02:00 ## 2 2021-02-27T07:24:32.3 2021-02-27T09:24:32.3+02:00 ## 3 2021-02-27T07:27:51.3 2021-02-27T09:27:51.3+02:00 ## 4 2021-02-27T07:31:30.4 2021-02-27T09:31:30.4+02:00 ## 5 2021-02-27T07:33:09.2 2021-02-27T09:33:09.2+02:00 splits$entrySplitPointTimes ## entryId startDateTime startDateTimeLocal stageTimeDurationMs ## 1 21540 2021-02-27T07:08:00 2021-02-27T09:08:00+02:00 844300 ## 2 21541 2021-02-27T07:11:00 2021-02-27T09:11:00+02:00 864400 ## 3 21542 2021-02-27T07:14:00 2021-02-27T09:14:00+02:00 1434500 ## 4 21535 2021-02-27T07:17:00 2021-02-27T09:17:00+02:00 853400 ## 5 21530 2021-02-27T07:20:00 2021-02-27T09:20:00+02:00 842000 ## 6 21539 2021-02-27T07:23:00 2021-02-27T09:23:00+02:00 839100 ## 7 21534 2021-02-27T07:26:00 2021-02-27T09:26:00+02:00 843200 ## 8 21537 2021-02-27T07:29:00 2021-02-27T09:29:00+02:00 846900 ## 9 21531 2021-02-27T07:32:00 2021-02-27T09:32:00+02:00 845800 ## 10 21532 2021-02-27T07:35:00 2021-02-27T09:35:00+02:00 835500 ## 11 21533 2021-02-27T07:38:00 2021-02-27T09:38:00+02:00 840200 ## 12 21538 2021-02-27T07:41:00 2021-02-27T09:41:00+02:00 841900 ## 13 21536 2021-02-27T07:44:00 2021-02-27T09:44:00+02:00 834500 ## 14 21548 2021-02-27T07:46:00 2021-02-27T09:46:00+02:00 869700 ## 15 21550 2021-02-27T07:48:00 2021-02-27T09:48:00+02:00 879600 ## 16 21543 2021-02-27T07:50:00 2021-02-27T09:50:00+02:00 871900 ## 17 21545 2021-02-27T07:52:00 2021-02-27T09:52:00+02:00 897200 ## 18 21544 2021-02-27T07:54:00 2021-02-27T09:54:00+02:00 888700 ## 19 21549 2021-02-27T07:56:00 2021-02-27T09:56:00+02:00 886700 ## 20 21552 2021-02-27T07:58:00 2021-02-27T09:58:00+02:00 923700 ## 21 21551 2021-02-27T08:00:00 2021-02-27T10:00:00+02:00 902500 ## 22 21546 2021-02-27T08:02:00 2021-02-27T10:02:00+02:00 940800 ## 23 21554 2021-02-27T08:04:00 2021-02-27T10:04:00+02:00 885600 ## 24 21553 2021-02-27T08:05:00 2021-02-27T10:05:00+02:00 886700 ## 25 21559 2021-02-27T08:06:00 2021-02-27T10:06:00+02:00 884000 ## 26 21556 2021-02-27T08:07:00 2021-02-27T10:07:00+02:00 902900 ## 27 21555 2021-02-27T08:08:00 2021-02-27T10:08:00+02:00 900200 ## 28 21557 2021-02-27T08:09:00 2021-02-27T10:09:00+02:00 898900 ## 29 21558 2021-02-27T08:10:00 2021-02-27T10:10:00+02:00 891000 ## 30 21561 2021-02-27T08:11:00 2021-02-27T10:11:00+02:00 915700 ## 31 21566 2021-02-27T08:12:00 2021-02-27T10:12:00+02:00 923600 ## 32 21571 2021-02-27T08:13:00 2021-02-27T10:13:00+02:00 936600 ## 33 21560 2021-02-27T08:14:00 2021-02-27T10:14:00+02:00 917100 ## 34 21576 2021-02-27T08:15:00 2021-02-27T10:15:00+02:00 937700 ## 35 21562 2021-02-27T08:16:00 2021-02-27T10:16:00+02:00 930400 ## 36 21570 2021-02-27T08:17:00 2021-02-27T10:17:00+02:00 940400 ## 37 21583 2021-02-27T08:18:00 2021-02-27T10:18:00+02:00 961200 ## 38 21563 2021-02-27T08:19:00 2021-02-27T10:19:00+02:00 939800 ## 39 21569 2021-02-27T08:20:00 2021-02-27T10:20:00+02:00 1484000 ## 40 21565 2021-02-27T08:21:00 2021-02-27T10:21:00+02:00 952900 ## 41 21568 2021-02-27T08:22:00 2021-02-27T10:22:00+02:00 963700 ## 42 21582 2021-02-27T08:23:00 2021-02-27T10:23:00+02:00 994300 ## 43 21575 2021-02-27T08:24:00 2021-02-27T10:24:00+02:00 982100 ## 44 21567 2021-02-27T08:25:00 2021-02-27T10:25:00+02:00 976800 ## 45 21564 2021-02-27T08:26:00 2021-02-27T10:26:00+02:00 968900 ## 46 21572 2021-02-27T08:27:00 2021-02-27T10:27:00+02:00 974800 ## 47 21578 2021-02-27T08:28:00 2021-02-27T10:28:00+02:00 990000 ## 48 21573 2021-02-27T08:29:00 2021-02-27T10:29:00+02:00 1031800 ## 49 21580 2021-02-27T08:30:00 2021-02-27T10:30:00+02:00 1020400 ## 50 21574 2021-02-27T08:31:00 2021-02-27T10:31:00+02:00 1084800 ## 51 21581 2021-02-27T08:32:00 2021-02-27T10:32:00+02:00 1049400 ## 52 21585 2021-02-27T08:34:00 2021-02-27T10:34:00+02:00 1027300 ## 53 21584 2021-02-27T08:35:00 2021-02-27T10:35:00+02:00 1012500 ## 54 21579 2021-02-27T08:37:00 2021-02-27T10:37:00+02:00 983700 ## stageTimeDuration ## 1 00:14:04.3000000 ## 2 00:14:24.4000000 ## 3 00:23:54.5000000 ## 4 00:14:13.4000000 ## 5 00:14:02 ## 6 00:13:59.1000000 ## 7 00:14:03.2000000 ## 8 00:14:06.9000000 ## 9 00:14:05.8000000 ## 10 00:13:55.5000000 ## 11 00:14:00.2000000 ## 12 00:14:01.9000000 ## 13 00:13:54.5000000 ## 14 00:14:29.7000000 ## 15 00:14:39.6000000 ## 16 00:14:31.9000000 ## 17 00:14:57.2000000 ## 18 00:14:48.7000000 ## 19 00:14:46.7000000 ## 20 00:15:23.7000000 ## 21 00:15:02.5000000 ## 22 00:15:40.8000000 ## 23 00:14:45.6000000 ## 24 00:14:46.7000000 ## 25 00:14:44 ## 26 00:15:02.9000000 ## 27 00:15:00.2000000 ## 28 00:14:58.9000000 ## 29 00:14:51 ## 30 00:15:15.7000000 ## 31 00:15:23.6000000 ## 32 00:15:36.6000000 ## 33 00:15:17.1000000 ## 34 00:15:37.7000000 ## 35 00:15:30.4000000 ## 36 00:15:40.4000000 ## 37 00:16:01.2000000 ## 38 00:15:39.8000000 ## 39 00:24:44 ## 40 00:15:52.9000000 ## 41 00:16:03.7000000 ## 42 00:16:34.3000000 ## 43 00:16:22.1000000 ## 44 00:16:16.8000000 ## 45 00:16:08.9000000 ## 46 00:16:14.8000000 ## 47 00:16:30 ## 48 00:17:11.8000000 ## 49 00:17:00.4000000 ## 50 00:18:04.8000000 ## 51 00:17:29.4000000 ## 52 00:17:07.3000000 ## 53 00:16:52.5000000 ## 54 00:16:23.7000000 ## splitPointTimes ## 1 123482, 123483, 123486, 123488, 123490, 3615, 3601, 3621, 3617, 3593, 21540, 21540, 21540, 21540, 21540, 161400, 272500, 471600, 692700, 791500, PT2M41.4S, PT4M32.5S, PT7M51.6S, PT11M32.7S, PT13M11.5S, 2021-02-27T07:10:41.4, 2021-02-27T07:12:32.5, 2021-02-27T07:15:51.6, 2021-02-27T07:19:32.7, 2021-02-27T07:21:11.5, 2021-02-27T09:10:41.4+02:00, 2021-02-27T09:12:32.5+02:00, 2021-02-27T09:15:51.6+02:00, 2021-02-27T09:19:32.7+02:00, 2021-02-27T09:21:11.5+02:00 ## 2 123484, 123485, 123487, 123493, 123494, 3615, 3601, 3621, 3617, 3593, 21541, 21541, 21541, 21541, 21541, 165200, 280600, 484700, 710100, 810300, PT2M45.2S, PT4M40.6S, PT8M4.7S, PT11M50.1S, PT13M30.3S, 2021-02-27T07:13:45.2, 2021-02-27T07:15:40.6, 2021-02-27T07:19:04.7, 2021-02-27T07:22:50.1, 2021-02-27T07:24:30.3, 2021-02-27T09:13:45.2+02:00, 2021-02-27T09:15:40.6+02:00, 2021-02-27T09:19:04.7+02:00, 2021-02-27T09:22:50.1+02:00, 2021-02-27T09:24:30.3+02:00 ## 3 123851, 123852, 3615, 3593, 21542, 21542, 8778800, 8778800, PT2H26M18.8S, PT2H26M18.8S, 2021-02-27T09:40:18.8, 2021-02-27T09:40:18.8, 2021-02-27T11:40:18.8+02:00, 2021-02-27T11:40:18.8+02:00 ## 4 123489, 123491, 123496, 123500, 123502, 3615, 3601, 3621, 3617, 3593, 21535, 21535, 21535, 21535, 21535, 165800, 278300, 479300, 700400, 800400, PT2M45.8S, PT4M38.3S, PT7M59.3S, PT11M40.4S, PT13M20.4S, 2021-02-27T07:19:45.8, 2021-02-27T07:21:38.3, 2021-02-27T07:24:59.3, 2021-02-27T07:28:40.4, 2021-02-27T07:30:20.4, 2021-02-27T09:19:45.8+02:00, 2021-02-27T09:21:38.3+02:00, 2021-02-27T09:24:59.3+02:00, 2021-02-27T09:28:40.4+02:00, 2021-02-27T09:30:20.4+02:00 ## 5 123492, 123495, 123499, 123505, 123507, 3615, 3601, 3621, 3617, 3593, 21530, 21530, 21530, 21530, 21530, 161700, 272300, 471300, 690400, 789200, PT2M41.7S, PT4M32.3S, PT7M51.3S, PT11M30.4S, PT13M9.2S, 2021-02-27T07:22:41.7, 2021-02-27T07:24:32.3, 2021-02-27T07:27:51.3, 2021-02-27T07:31:30.4, 2021-02-27T07:33:09.2, 2021-02-27T09:22:41.7+02:00, 2021-02-27T09:24:32.3+02:00, 2021-02-27T09:27:51.3+02:00, 2021-02-27T09:31:30.4+02:00, 2021-02-27T09:33:09.2+02:00 ## 6 123497, 123498, 123504, 123510, 123512, 3615, 3601, 3621, 3617, 3593, 21539, 21539, 21539, 21539, 21539, 163600, 275100, 471300, 688300, 786700, PT2M43.6S, PT4M35.1S, PT7M51.3S, PT11M28.3S, PT13M6.7S, 2021-02-27T07:25:43.6, 2021-02-27T07:27:35.1, 2021-02-27T07:30:51.3, 2021-02-27T07:34:28.3, 2021-02-27T07:36:06.7, 2021-02-27T09:25:43.6+02:00, 2021-02-27T09:27:35.1+02:00, 2021-02-27T09:30:51.3+02:00, 2021-02-27T09:34:28.3+02:00, 2021-02-27T09:36:06.7+02:00 ## 7 123501, 123503, 123509, 123515, 123517, 3615, 3601, 3621, 3617, 3593, 21534, 21534, 21534, 21534, 21534, 161400, 270300, 469800, 689500, 789900, PT2M41.4S, PT4M30.3S, PT7M49.8S, PT11M29.5S, PT13M9.9S, 2021-02-27T07:28:41.4, 2021-02-27T07:30:30.3, 2021-02-27T07:33:49.8, 2021-02-27T07:37:29.5, 2021-02-27T07:39:09.9, 2021-02-27T09:28:41.4+02:00, 2021-02-27T09:30:30.3+02:00, 2021-02-27T09:33:49.8+02:00, 2021-02-27T09:37:29.5+02:00, 2021-02-27T09:39:09.9+02:00 ## 8 123506, 123508, 123514, 123520, 123522, 3615, 3601, 3621, 3617, 3593, 21537, 21537, 21537, 21537, 21537, 161800, 274500, 474300, 694200, 794200, PT2M41.8S, PT4M34.5S, PT7M54.3S, PT11M34.2S, PT13M14.2S, 2021-02-27T07:31:41.8, 2021-02-27T07:33:34.5, 2021-02-27T07:36:54.3, 2021-02-27T07:40:34.2, 2021-02-27T07:42:14.2, 2021-02-27T09:31:41.8+02:00, 2021-02-27T09:33:34.5+02:00, 2021-02-27T09:36:54.3+02:00, 2021-02-27T09:40:34.2+02:00, 2021-02-27T09:42:14.2+02:00 ## 9 123511, 123513, 123519, 123525, 123527, 3615, 3601, 3621, 3617, 3593, 21531, 21531, 21531, 21531, 21531, 162300, 273700, 472300, 692100, 792400, PT2M42.3S, PT4M33.7S, PT7M52.3S, PT11M32.1S, PT13M12.4S, 2021-02-27T07:34:42.3, 2021-02-27T07:36:33.7, 2021-02-27T07:39:52.3, 2021-02-27T07:43:32.1, 2021-02-27T07:45:12.4, 2021-02-27T09:34:42.3+02:00, 2021-02-27T09:36:33.7+02:00, 2021-02-27T09:39:52.3+02:00, 2021-02-27T09:43:32.1+02:00, 2021-02-27T09:45:12.4+02:00 ## 10 123516, 123518, 123524, 123530, 123532, 3615, 3601, 3621, 3617, 3593, 21532, 21532, 21532, 21532, 21532, 159100, 268600, 465800, 682700, 782700, PT2M39.1S, PT4M28.6S, PT7M45.8S, PT11M22.7S, PT13M2.7S, 2021-02-27T07:37:39.1, 2021-02-27T07:39:28.6, 2021-02-27T07:42:45.8, 2021-02-27T07:46:22.7, 2021-02-27T07:48:02.7, 2021-02-27T09:37:39.1+02:00, 2021-02-27T09:39:28.6+02:00, 2021-02-27T09:42:45.8+02:00, 2021-02-27T09:46:22.7+02:00, 2021-02-27T09:48:02.7+02:00 ## 11 123521, 123523, 123529, 123536, 123539, 3615, 3601, 3621, 3617, 3593, 21533, 21533, 21533, 21533, 21533, 159600, 270600, 468300, 686600, 786900, PT2M39.6S, PT4M30.6S, PT7M48.3S, PT11M26.6S, PT13M6.9S, 2021-02-27T07:40:39.6, 2021-02-27T07:42:30.6, 2021-02-27T07:45:48.3, 2021-02-27T07:49:26.6, 2021-02-27T07:51:06.9, 2021-02-27T09:40:39.6+02:00, 2021-02-27T09:42:30.6+02:00, 2021-02-27T09:45:48.3+02:00, 2021-02-27T09:49:26.6+02:00, 2021-02-27T09:51:06.9+02:00 ## 12 123526, 123528, 123535, 123541, 123545, 3615, 3601, 3621, 3617, 3593, 21538, 21538, 21538, 21538, 21538, 158400, 270300, 471200, 688400, 788500, PT2M38.4S, PT4M30.3S, PT7M51.2S, PT11M28.4S, PT13M8.5S, 2021-02-27T07:43:38.4, 2021-02-27T07:45:30.3, 2021-02-27T07:48:51.2, 2021-02-27T07:52:28.4, 2021-02-27T07:54:08.5, 2021-02-27T09:43:38.4+02:00, 2021-02-27T09:45:30.3+02:00, 2021-02-27T09:48:51.2+02:00, 2021-02-27T09:52:28.4+02:00, 2021-02-27T09:54:08.5+02:00 ## 13 123531, 123533, 123540, 123548, 123552, 3615, 3601, 3621, 3617, 3593, 21536, 21536, 21536, 21536, 21536, 157500, 267300, 463800, 681200, 781600, PT2M37.5S, PT4M27.3S, PT7M43.8S, PT11M21.2S, PT13M1.6S, 2021-02-27T07:46:37.5, 2021-02-27T07:48:27.3, 2021-02-27T07:51:43.8, 2021-02-27T07:55:21.2, 2021-02-27T07:57:01.6, 2021-02-27T09:46:37.5+02:00, 2021-02-27T09:48:27.3+02:00, 2021-02-27T09:51:43.8+02:00, 2021-02-27T09:55:21.2+02:00, 2021-02-27T09:57:01.6+02:00 ## 14 123534, 123537, 123544, 123553, 123557, 3615, 3601, 3621, 3617, 3593, 21548, 21548, 21548, 21548, 21548, 165600, 283100, 487300, 711900, 814900, PT2M45.6S, PT4M43.1S, PT8M7.3S, PT11M51.9S, PT13M34.9S, 2021-02-27T07:48:45.6, 2021-02-27T07:50:43.1, 2021-02-27T07:54:07.3, 2021-02-27T07:57:51.9, 2021-02-27T07:59:34.9, 2021-02-27T09:48:45.6+02:00, 2021-02-27T09:50:43.1+02:00, 2021-02-27T09:54:07.3+02:00, 2021-02-27T09:57:51.9+02:00, 2021-02-27T09:59:34.9+02:00 ## 15 123538, 123543, 123549, 123558, 123562, 3615, 3601, 3621, 3617, 3593, 21550, 21550, 21550, 21550, 21550, 168600, 286300, 493300, 720800, 824300, PT2M48.6S, PT4M46.3S, PT8M13.3S, PT12M0.8S, PT13M44.3S, 2021-02-27T07:50:48.6, 2021-02-27T07:52:46.3, 2021-02-27T07:56:13.3, 2021-02-27T08:00:00.8, 2021-02-27T08:01:44.3, 2021-02-27T09:50:48.6+02:00, 2021-02-27T09:52:46.3+02:00, 2021-02-27T09:56:13.3+02:00, 2021-02-27T10:00:00.8+02:00, 2021-02-27T10:01:44.3+02:00 ## 16 123542, 123546, 123554, 123563, 123567, 3615, 3601, 3621, 3617, 3593, 21543, 21543, 21543, 21543, 21543, 164700, 282100, 488300, 714200, 817400, PT2M44.7S, PT4M42.1S, PT8M8.3S, PT11M54.2S, PT13M37.4S, 2021-02-27T07:52:44.7, 2021-02-27T07:54:42.1, 2021-02-27T07:58:08.3, 2021-02-27T08:01:54.2, 2021-02-27T08:03:37.4, 2021-02-27T09:52:44.7+02:00, 2021-02-27T09:54:42.1+02:00, 2021-02-27T09:58:08.3+02:00, 2021-02-27T10:01:54.2+02:00, 2021-02-27T10:03:37.4+02:00 ## 17 123547, 123550, 123559, 123569, 123572, 3615, 3601, 3621, 3617, 3593, 21545, 21545, 21545, 21545, 21545, 170400, 288000, 495800, 737000, 841400, PT2M50.4S, PT4M48S, PT8M15.8S, PT12M17S, PT14M1.4S, 2021-02-27T07:54:50.4, 2021-02-27T07:56:48, 2021-02-27T08:00:15.8, 2021-02-27T08:04:17, 2021-02-27T08:06:01.4, 2021-02-27T09:54:50.4+02:00, 2021-02-27T09:56:48+02:00, 2021-02-27T10:00:15.8+02:00, 2021-02-27T10:04:17+02:00, 2021-02-27T10:06:01.4+02:00 ## 18 123551, 123556, 123564, 123573, 123578, 3615, 3601, 3621, 3617, 3593, 21544, 21544, 21544, 21544, 21544, 170900, 290700, 502300, 728600, 832600, PT2M50.9S, PT4M50.7S, PT8M22.3S, PT12M8.6S, PT13M52.6S, 2021-02-27T07:56:50.9, 2021-02-27T07:58:50.7, 2021-02-27T08:02:22.3, 2021-02-27T08:06:08.6, 2021-02-27T08:07:52.6, 2021-02-27T09:56:50.9+02:00, 2021-02-27T09:58:50.7+02:00, 2021-02-27T10:02:22.3+02:00, 2021-02-27T10:06:08.6+02:00, 2021-02-27T10:07:52.6+02:00 ## 19 123555, 123560, 123568, 123579, 123583, 3615, 3601, 3621, 3617, 3593, 21549, 21549, 21549, 21549, 21549, 169600, 288500, 495800, 727100, 831100, PT2M49.6S, PT4M48.5S, PT8M15.8S, PT12M7.1S, PT13M51.1S, 2021-02-27T07:58:49.6, 2021-02-27T08:00:48.5, 2021-02-27T08:04:15.8, 2021-02-27T08:08:07.1, 2021-02-27T08:09:51.1, 2021-02-27T09:58:49.6+02:00, 2021-02-27T10:00:48.5+02:00, 2021-02-27T10:04:15.8+02:00, 2021-02-27T10:08:07.1+02:00, 2021-02-27T10:09:51.1+02:00 ## 20 123561, 123566, 123574, 123586, 123593, 3615, 3601, 3621, 3617, 3593, 21552, 21552, 21552, 21552, 21552, 176100, 299800, 518800, 759100, 866000, PT2M56.1S, PT4M59.8S, PT8M38.8S, PT12M39.1S, PT14M26S, 2021-02-27T08:00:56.1, 2021-02-27T08:02:59.8, 2021-02-27T08:06:38.8, 2021-02-27T08:10:39.1, 2021-02-27T08:12:26, 2021-02-27T10:00:56.1+02:00, 2021-02-27T10:02:59.8+02:00, 2021-02-27T10:06:38.8+02:00, 2021-02-27T10:10:39.1+02:00, 2021-02-27T10:12:26+02:00 ## 21 123565, 123570, 123580, 123592, 123599, 3615, 3601, 3621, 3617, 3593, 21551, 21551, 21551, 21551, 21551, 171700, 292000, 505800, 739200, 844600, PT2M51.7S, PT4M52S, PT8M25.8S, PT12M19.2S, PT14M4.6S, 2021-02-27T08:02:51.7, 2021-02-27T08:04:52, 2021-02-27T08:08:25.8, 2021-02-27T08:12:19.2, 2021-02-27T08:14:04.6, 2021-02-27T10:02:51.7+02:00, 2021-02-27T10:04:52+02:00, 2021-02-27T10:08:25.8+02:00, 2021-02-27T10:12:19.2+02:00, 2021-02-27T10:14:04.6+02:00 ## 22 123571, 123576, 123588, 123601, 123610, 3615, 3601, 3621, 3617, 3593, 21546, 21546, 21546, 21546, 21546, 183100, 310300, 534700, 772700, 882100, PT3M3.1S, PT5M10.3S, PT8M54.7S, PT12M52.7S, PT14M42.1S, 2021-02-27T08:05:03.1, 2021-02-27T08:07:10.3, 2021-02-27T08:10:54.7, 2021-02-27T08:14:52.7, 2021-02-27T08:16:42.1, 2021-02-27T10:05:03.1+02:00, 2021-02-27T10:07:10.3+02:00, 2021-02-27T10:10:54.7+02:00, 2021-02-27T10:14:52.7+02:00, 2021-02-27T10:16:42.1+02:00 ## 23 123575, 123582, 123594, 123606, 123618, 3615, 3601, 3621, 3617, 3593, 21554, 21554, 21554, 21554, 21554, 167700, 285500, 495300, 724100, 829600, PT2M47.7S, PT4M45.5S, PT8M15.3S, PT12M4.1S, PT13M49.6S, 2021-02-27T08:06:47.7, 2021-02-27T08:08:45.5, 2021-02-27T08:12:15.3, 2021-02-27T08:16:04.1, 2021-02-27T08:17:49.6, 2021-02-27T10:06:47.7+02:00, 2021-02-27T10:08:45.5+02:00, 2021-02-27T10:12:15.3+02:00, 2021-02-27T10:16:04.1+02:00, 2021-02-27T10:17:49.6+02:00 ## 24 123577, 123585, 123596, 123613, 123621, 3615, 3601, 3621, 3617, 3593, 21553, 21553, 21553, 21553, 21553, 171300, 288900, 498200, 725300, 830400, PT2M51.3S, PT4M48.9S, PT8M18.2S, PT12M5.3S, PT13M50.4S, 2021-02-27T08:07:51.3, 2021-02-27T08:09:48.9, 2021-02-27T08:13:18.2, 2021-02-27T08:17:05.3, 2021-02-27T08:18:50.4, 2021-02-27T10:07:51.3+02:00, 2021-02-27T10:09:48.9+02:00, 2021-02-27T10:13:18.2+02:00, 2021-02-27T10:17:05.3+02:00, 2021-02-27T10:18:50.4+02:00 ## 25 123581, 123589, 123600, 123616, 123625, 3615, 3601, 3621, 3617, 3593, 21559, 21559, 21559, 21559, 21559, 169000, 286500, 495200, 723700, 828300, PT2M49S, PT4M46.5S, PT8M15.2S, PT12M3.7S, PT13M48.3S, 2021-02-27T08:08:49, 2021-02-27T08:10:46.5, 2021-02-27T08:14:15.2, 2021-02-27T08:18:03.7, 2021-02-27T08:19:48.3, 2021-02-27T10:08:49+02:00, 2021-02-27T10:10:46.5+02:00, 2021-02-27T10:14:15.2+02:00, 2021-02-27T10:18:03.7+02:00, 2021-02-27T10:19:48.3+02:00 ## 26 123584, 123591, 123603, 123623, 123630, 3615, 3601, 3621, 3617, 3593, 21556, 21556, 21556, 21556, 21556, 170900, 292800, 506300, 740700, 846900, PT2M50.9S, PT4M52.8S, PT8M26.3S, PT12M20.7S, PT14M6.9S, 2021-02-27T08:09:50.9, 2021-02-27T08:11:52.8, 2021-02-27T08:15:26.3, 2021-02-27T08:19:20.7, 2021-02-27T08:21:06.9, 2021-02-27T10:09:50.9+02:00, 2021-02-27T10:11:52.8+02:00, 2021-02-27T10:15:26.3+02:00, 2021-02-27T10:19:20.7+02:00, 2021-02-27T10:21:06.9+02:00 ## 27 123587, 123595, 123609, 123628, 123634, 3615, 3601, 3621, 3617, 3593, 21555, 21555, 21555, 21555, 21555, 170400, 291200, 506100, 737600, 843300, PT2M50.4S, PT4M51.2S, PT8M26.1S, PT12M17.6S, PT14M3.3S, 2021-02-27T08:10:50.4, 2021-02-27T08:12:51.2, 2021-02-27T08:16:26.1, 2021-02-27T08:20:17.6, 2021-02-27T08:22:03.3, 2021-02-27T10:10:50.4+02:00, 2021-02-27T10:12:51.2+02:00, 2021-02-27T10:16:26.1+02:00, 2021-02-27T10:20:17.6+02:00, 2021-02-27T10:22:03.3+02:00 ## 28 123590, 123597, 123614, 123631, 123639, 3615, 3601, 3621, 3617, 3593, 21557, 21557, 21557, 21557, 21557, 172800, 293200, 504800, 737500, 842700, PT2M52.8S, PT4M53.2S, PT8M24.8S, PT12M17.5S, PT14M2.7S, 2021-02-27T08:11:52.8, 2021-02-27T08:13:53.2, 2021-02-27T08:17:24.8, 2021-02-27T08:21:17.5, 2021-02-27T08:23:02.7, 2021-02-27T10:11:52.8+02:00, 2021-02-27T10:13:53.2+02:00, 2021-02-27T10:17:24.8+02:00, 2021-02-27T10:21:17.5+02:00, 2021-02-27T10:23:02.7+02:00 ## 29 123607, 123608, 123619, 123643, 123646, 3615, 3601, 3621, 3617, 3593, 21558, 21558, 21558, 21558, 21558, 169700, 289100, 500800, 730600, 834900, PT2M49.7S, PT4M49.1S, PT8M20.8S, PT12M10.6S, PT13M54.9S, 2021-02-27T08:12:49.7, 2021-02-27T08:14:49.1, 2021-02-27T08:18:20.8, 2021-02-27T08:22:10.6, 2021-02-27T08:23:54.9, 2021-02-27T10:12:49.7+02:00, 2021-02-27T10:14:49.1+02:00, 2021-02-27T10:18:20.8+02:00, 2021-02-27T10:22:10.6+02:00, 2021-02-27T10:23:54.9+02:00 ## 30 123598, 123604, 123624, 123642, 123653, 3615, 3601, 3621, 3617, 3593, 21561, 21561, 21561, 21561, 21561, 175500, 297300, 513800, 749700, 857400, PT2M55.5S, PT4M57.3S, PT8M33.8S, PT12M29.7S, PT14M17.4S, 2021-02-27T08:13:55.5, 2021-02-27T08:15:57.3, 2021-02-27T08:19:33.8, 2021-02-27T08:23:29.7, 2021-02-27T08:25:17.4, 2021-02-27T10:13:55.5+02:00, 2021-02-27T10:15:57.3+02:00, 2021-02-27T10:19:33.8+02:00, 2021-02-27T10:23:29.7+02:00, 2021-02-27T10:25:17.4+02:00 ## 31 123602, 123612, 123629, 123647, 123657, 3615, 3601, 3621, 3617, 3593, 21566, 21566, 21566, 21566, 21566, 176900, 301200, 521700, 758400, 865000, PT2M56.9S, PT5M1.2S, PT8M41.7S, PT12M38.4S, PT14M25S, 2021-02-27T08:14:56.9, 2021-02-27T08:17:01.2, 2021-02-27T08:20:41.7, 2021-02-27T08:24:38.4, 2021-02-27T08:26:25, 2021-02-27T10:14:56.9+02:00, 2021-02-27T10:17:01.2+02:00, 2021-02-27T10:20:41.7+02:00, 2021-02-27T10:24:38.4+02:00, 2021-02-27T10:26:25+02:00 ## 32 123605, 123617, 123633, 123654, 123663, 3615, 3601, 3621, 3617, 3593, 21571, 21571, 21571, 21571, 21571, 181200, 309800, 529800, 770800, 879300, PT3M1.2S, PT5M9.8S, PT8M49.8S, PT12M50.8S, PT14M39.3S, 2021-02-27T08:16:01.2, 2021-02-27T08:18:09.8, 2021-02-27T08:21:49.8, 2021-02-27T08:25:50.8, 2021-02-27T08:27:39.3, 2021-02-27T10:16:01.2+02:00, 2021-02-27T10:18:09.8+02:00, 2021-02-27T10:21:49.8+02:00, 2021-02-27T10:25:50.8+02:00, 2021-02-27T10:27:39.3+02:00 ## 33 123611, 123620, 123638, 123659, 123667, 3615, 3601, 3621, 3617, 3593, 21560, 21560, 21560, 21560, 21560, 175700, 298000, 515600, 754500, 860700, PT2M55.7S, PT4M58S, PT8M35.6S, PT12M34.5S, PT14M20.7S, 2021-02-27T08:16:55.7, 2021-02-27T08:18:58, 2021-02-27T08:22:35.6, 2021-02-27T08:26:34.5, 2021-02-27T08:28:20.7, 2021-02-27T10:16:55.7+02:00, 2021-02-27T10:18:58+02:00, 2021-02-27T10:22:35.6+02:00, 2021-02-27T10:26:34.5+02:00, 2021-02-27T10:28:20.7+02:00 ## 34 123615, 123627, 123644, 123664, 123670, 3615, 3601, 3621, 3617, 3593, 21576, 21576, 21576, 21576, 21576, 181500, 307500, 529300, 766100, 878700, PT3M1.5S, PT5M7.5S, PT8M49.3S, PT12M46.1S, PT14M38.7S, 2021-02-27T08:18:01.5, 2021-02-27T08:20:07.5, 2021-02-27T08:23:49.3, 2021-02-27T08:27:46.1, 2021-02-27T08:29:38.7, 2021-02-27T10:18:01.5+02:00, 2021-02-27T10:20:07.5+02:00, 2021-02-27T10:23:49.3+02:00, 2021-02-27T10:27:46.1+02:00, 2021-02-27T10:29:38.7+02:00 ## 35 123622, 123637, 123648, 123669, 123677, 3615, 3601, 3621, 3617, 3593, 21562, 21562, 21562, 21562, 21562, 179800, 306300, 528100, 765300, 872300, PT2M59.8S, PT5M6.3S, PT8M48.1S, PT12M45.3S, PT14M32.3S, 2021-02-27T08:18:59.8, 2021-02-27T08:21:06.3, 2021-02-27T08:24:48.1, 2021-02-27T08:28:45.3, 2021-02-27T08:30:32.3, 2021-02-27T10:18:59.8+02:00, 2021-02-27T10:21:06.3+02:00, 2021-02-27T10:24:48.1+02:00, 2021-02-27T10:28:45.3+02:00, 2021-02-27T10:30:32.3+02:00 ## 36 123626, 123636, 123655, 123672, 123680, 3615, 3601, 3621, 3617, 3593, 21570, 21570, 21570, 21570, 21570, 178700, 304200, 530700, 771100, 880600, PT2M58.7S, PT5M4.2S, PT8M50.7S, PT12M51.1S, PT14M40.6S, 2021-02-27T08:19:58.7, 2021-02-27T08:22:04.2, 2021-02-27T08:25:50.7, 2021-02-27T08:29:51.1, 2021-02-27T08:31:40.6, 2021-02-27T10:19:58.7+02:00, 2021-02-27T10:22:04.2+02:00, 2021-02-27T10:25:50.7+02:00, 2021-02-27T10:29:51.1+02:00, 2021-02-27T10:31:40.6+02:00 ## 37 123632, 123641, 123660, 123681, 123686, 3615, 3601, 3621, 3617, 3593, 21583, 21583, 21583, 21583, 21583, 183900, 310500, 542300, 785400, 899400, PT3M3.9S, PT5M10.5S, PT9M2.3S, PT13M5.4S, PT14M59.4S, 2021-02-27T08:21:03.9, 2021-02-27T08:23:10.5, 2021-02-27T08:27:02.3, 2021-02-27T08:31:05.4, 2021-02-27T08:32:59.4, 2021-02-27T10:21:03.9+02:00, 2021-02-27T10:23:10.5+02:00, 2021-02-27T10:27:02.3+02:00, 2021-02-27T10:31:05.4+02:00, 2021-02-27T10:32:59.4+02:00 ## 38 123635, 123649, 123665, 123682, 123691, 3615, 3601, 3621, 3617, 3593, 21563, 21563, 21563, 21563, 21563, 177300, 301100, 536300, 773600, 882300, PT2M57.3S, PT5M1.1S, PT8M56.3S, PT12M53.6S, PT14M42.3S, 2021-02-27T08:21:57.3, 2021-02-27T08:24:01.1, 2021-02-27T08:27:56.3, 2021-02-27T08:31:53.6, 2021-02-27T08:33:42.3, 2021-02-27T10:21:57.3+02:00, 2021-02-27T10:24:01.1+02:00, 2021-02-27T10:27:56.3+02:00, 2021-02-27T10:31:53.6+02:00, 2021-02-27T10:33:42.3+02:00 ## 39 123640, 123652, 3615, 3601, 21569, 21569, 182300, 310200, PT3M2.3S, PT5M10.2S, 2021-02-27T08:23:02.3, 2021-02-27T08:25:10.2, 2021-02-27T10:23:02.3+02:00, 2021-02-27T10:25:10.2+02:00 ## 40 123645, 123658, 123674, 123690, 123700, 3615, 3601, 3621, 3617, 3593, 21565, 21565, 21565, 21565, 21565, 184100, 314200, 542200, 785400, 894200, PT3M4.1S, PT5M14.2S, PT9M2.2S, PT13M5.4S, PT14M54.2S, 2021-02-27T08:24:04.1, 2021-02-27T08:26:14.2, 2021-02-27T08:30:02.2, 2021-02-27T08:34:05.4, 2021-02-27T08:35:54.2, 2021-02-27T10:24:04.1+02:00, 2021-02-27T10:26:14.2+02:00, 2021-02-27T10:30:02.2+02:00, 2021-02-27T10:34:05.4+02:00, 2021-02-27T10:35:54.2+02:00 ## 41 123651, 123662, 123678, 123696, 123703, 3615, 3601, 3621, 3617, 3593, 21568, 21568, 21568, 21568, 21568, 183000, 309500, 548800, 794700, 904200, PT3M3S, PT5M9.5S, PT9M8.8S, PT13M14.7S, PT15M4.2S, 2021-02-27T08:25:03, 2021-02-27T08:27:09.5, 2021-02-27T08:31:08.8, 2021-02-27T08:35:14.7, 2021-02-27T08:37:04.2, 2021-02-27T10:25:03+02:00, 2021-02-27T10:27:09.5+02:00, 2021-02-27T10:31:08.8+02:00, 2021-02-27T10:35:14.7+02:00, 2021-02-27T10:37:04.2+02:00 ## 42 123656, 123668, 123684, 123702, 123711, 3615, 3601, 3621, 3617, 3593, 21582, 21582, 21582, 21582, 21582, 189600, 321500, 560400, 811800, 930700, PT3M9.6S, PT5M21.5S, PT9M20.4S, PT13M31.8S, PT15M30.7S, 2021-02-27T08:26:09.6, 2021-02-27T08:28:21.5, 2021-02-27T08:32:20.4, 2021-02-27T08:36:31.8, 2021-02-27T08:38:30.7, 2021-02-27T10:26:09.6+02:00, 2021-02-27T10:28:21.5+02:00, 2021-02-27T10:32:20.4+02:00, 2021-02-27T10:36:31.8+02:00, 2021-02-27T10:38:30.7+02:00 ## 43 123661, 123671, 123688, 123707, 123713, 3615, 3601, 3621, 3617, 3593, 21575, 21575, 21575, 21575, 21575, 191300, 325000, 558800, 811500, 922600, PT3M11.3S, PT5M25S, PT9M18.8S, PT13M31.5S, PT15M22.6S, 2021-02-27T08:27:11.3, 2021-02-27T08:29:25, 2021-02-27T08:33:18.8, 2021-02-27T08:37:31.5, 2021-02-27T08:39:22.6, 2021-02-27T10:27:11.3+02:00, 2021-02-27T10:29:25+02:00, 2021-02-27T10:33:18.8+02:00, 2021-02-27T10:37:31.5+02:00, 2021-02-27T10:39:22.6+02:00 ## 44 123666, 123676, 123693, 123710, 123721, 3615, 3601, 3621, 3617, 3593, 21567, 21567, 21567, 21567, 21567, 188600, 323600, 557100, 808100, 917500, PT3M8.6S, PT5M23.6S, PT9M17.1S, PT13M28.1S, PT15M17.5S, 2021-02-27T08:28:08.6, 2021-02-27T08:30:23.6, 2021-02-27T08:34:17.1, 2021-02-27T08:38:28.1, 2021-02-27T08:40:17.5, 2021-02-27T10:28:08.6+02:00, 2021-02-27T10:30:23.6+02:00, 2021-02-27T10:34:17.1+02:00, 2021-02-27T10:38:28.1+02:00, 2021-02-27T10:40:17.5+02:00 ## 45 123673, 123692, 123697, 123720, 123724, 3615, 3601, 3621, 3617, 3593, 21564, 21564, 21564, 21564, 21564, 184900, 319000, 552100, 799000, 909800, PT3M4.9S, PT5M19S, PT9M12.1S, PT13M19S, PT15M9.8S, 2021-02-27T08:29:04.9, 2021-02-27T08:31:19, 2021-02-27T08:35:12.1, 2021-02-27T08:39:19, 2021-02-27T08:41:09.8, 2021-02-27T10:29:04.9+02:00, 2021-02-27T10:31:19+02:00, 2021-02-27T10:35:12.1+02:00, 2021-02-27T10:39:19+02:00, 2021-02-27T10:41:09.8+02:00 ## 46 123675, 123683, 123701, 123719, 123728, 3615, 3601, 3621, 3617, 3593, 21572, 21572, 21572, 21572, 21572, 187100, 323200, 555800, 804400, 915000, PT3M7.1S, PT5M23.2S, PT9M15.8S, PT13M24.4S, PT15M15S, 2021-02-27T08:30:07.1, 2021-02-27T08:32:23.2, 2021-02-27T08:36:15.8, 2021-02-27T08:40:24.4, 2021-02-27T08:42:15, 2021-02-27T10:30:07.1+02:00, 2021-02-27T10:32:23.2+02:00, 2021-02-27T10:36:15.8+02:00, 2021-02-27T10:40:24.4+02:00, 2021-02-27T10:42:15+02:00 ## 47 123679, 123689, 123706, 123725, 123732, 3615, 3601, 3621, 3617, 3593, 21578, 21578, 21578, 21578, 21578, 191900, 328500, 566300, 818500, 929500, PT3M11.9S, PT5M28.5S, PT9M26.3S, PT13M38.5S, PT15M29.5S, 2021-02-27T08:31:11.9, 2021-02-27T08:33:28.5, 2021-02-27T08:37:26.3, 2021-02-27T08:41:38.5, 2021-02-27T08:43:29.5, 2021-02-27T10:31:11.9+02:00, 2021-02-27T10:33:28.5+02:00, 2021-02-27T10:37:26.3+02:00, 2021-02-27T10:41:38.5+02:00, 2021-02-27T10:43:29.5+02:00 ## 48 123685, 123695, 123712, 123731, 123738, 3615, 3601, 3621, 3617, 3593, 21573, 21573, 21573, 21573, 21573, 196700, 340200, 586300, 854500, 969700, PT3M16.7S, PT5M40.2S, PT9M46.3S, PT14M14.5S, PT16M9.7S, 2021-02-27T08:32:16.7, 2021-02-27T08:34:40.2, 2021-02-27T08:38:46.3, 2021-02-27T08:43:14.5, 2021-02-27T08:45:09.7, 2021-02-27T10:32:16.7+02:00, 2021-02-27T10:34:40.2+02:00, 2021-02-27T10:38:46.3+02:00, 2021-02-27T10:43:14.5+02:00, 2021-02-27T10:45:09.7+02:00 ## 49 123687, 123699, 123716, 123735, 123740, 3615, 3601, 3621, 3617, 3593, 21580, 21580, 21580, 21580, 21580, 193400, 335100, 579300, 841200, 956700, PT3M13.4S, PT5M35.1S, PT9M39.3S, PT14M1.2S, PT15M56.7S, 2021-02-27T08:33:13.4, 2021-02-27T08:35:35.1, 2021-02-27T08:39:39.3, 2021-02-27T08:44:01.2, 2021-02-27T08:45:56.7, 2021-02-27T10:33:13.4+02:00, 2021-02-27T10:35:35.1+02:00, 2021-02-27T10:39:39.3+02:00, 2021-02-27T10:44:01.2+02:00, 2021-02-27T10:45:56.7+02:00 ## 50 123694, 123704, 123723, 123741, 123749, 3615, 3601, 3621, 3617, 3593, 21574, 21574, 21574, 21574, 21574, 209300, 358300, 615300, 899800, 1019200, PT3M29.3S, PT5M58.3S, PT10M15.3S, PT14M59.8S, PT16M59.2S, 2021-02-27T08:34:29.3, 2021-02-27T08:36:58.3, 2021-02-27T08:41:15.3, 2021-02-27T08:45:59.8, 2021-02-27T08:47:59.2, 2021-02-27T10:34:29.3+02:00, 2021-02-27T10:36:58.3+02:00, 2021-02-27T10:41:15.3+02:00, 2021-02-27T10:45:59.8+02:00, 2021-02-27T10:47:59.2+02:00 ## 51 123698, 123708, 123727, 123743, 123750, 3615, 3601, 3621, 3617, 3593, 21581, 21581, 21581, 21581, 21581, 208000, 351800, 602800, 870000, 985600, PT3M28S, PT5M51.8S, PT10M2.8S, PT14M30S, PT16M25.6S, 2021-02-27T08:35:28, 2021-02-27T08:37:51.8, 2021-02-27T08:42:02.8, 2021-02-27T08:46:30, 2021-02-27T08:48:25.6, 2021-02-27T10:35:28+02:00, 2021-02-27T10:37:51.8+02:00, 2021-02-27T10:42:02.8+02:00, 2021-02-27T10:46:30+02:00, 2021-02-27T10:48:25.6+02:00 ## 52 123705, 123715, 123734, 123748, 123756, 3615, 3601, 3621, 3617, 3593, 21585, 21585, 21585, 21585, 21585, 196700, 334500, 578700, 838400, 961500, PT3M16.7S, PT5M34.5S, PT9M38.7S, PT13M58.4S, PT16M1.5S, 2021-02-27T08:37:16.7, 2021-02-27T08:39:34.5, 2021-02-27T08:43:38.7, 2021-02-27T08:47:58.4, 2021-02-27T08:50:01.5, 2021-02-27T10:37:16.7+02:00, 2021-02-27T10:39:34.5+02:00, 2021-02-27T10:43:38.7+02:00, 2021-02-27T10:47:58.4+02:00, 2021-02-27T10:50:01.5+02:00 ## 53 123709, 123718, 123736, 123752, 123758, 3615, 3601, 3621, 3617, 3593, 21584, 21584, 21584, 21584, 21584, 190300, 322100, 562200, 820400, 946400, PT3M10.3S, PT5M22.1S, PT9M22.2S, PT13M40.4S, PT15M46.4S, 2021-02-27T08:38:10.3, 2021-02-27T08:40:22.1, 2021-02-27T08:44:22.2, 2021-02-27T08:48:40.4, 2021-02-27T08:50:46.4, 2021-02-27T10:38:10.3+02:00, 2021-02-27T10:40:22.1+02:00, 2021-02-27T10:44:22.2+02:00, 2021-02-27T10:48:40.4+02:00, 2021-02-27T10:50:46.4+02:00 ## 54 123717, 123729, 123744, 123759, 123763, 3615, 3601, 3621, 3617, 3593, 21579, 21579, 21579, 21579, 21579, 189600, 324200, 564700, 814800, 924700, PT3M9.6S, PT5M24.2S, PT9M24.7S, PT13M34.8S, PT15M24.7S, 2021-02-27T08:40:09.6, 2021-02-27T08:42:24.2, 2021-02-27T08:46:24.7, 2021-02-27T08:50:34.8, 2021-02-27T08:52:24.7, 2021-02-27T10:40:09.6+02:00, 2021-02-27T10:42:24.2+02:00, 2021-02-27T10:46:24.7+02:00, 2021-02-27T10:50:34.8+02:00, 2021-02-27T10:52:24.7+02:00 2.7.1 Driver Split Times Detail We can get a flatter structure over all drivers, converting the elapsed duration in milliseconds to seconds along the way: #driver_splits = do.call(rbind, entry_splits$splitPointTimes) # The tidyverse approach is to use dplyr::bind_rows() # We can also construct a pipe to streamline the processing get_driver_splits = function(splits){ driver_splits = splits$entrySplitPointTimes$splitPointTimes %&gt;% bind_rows() %&gt;% mutate(elapsedDurationS = elapsedDurationMs / 1000) %&gt;% select(-elapsedDurationMs) driver_splits } driver_splits = get_driver_splits(splits) driver_splits %&gt;% head(2) ## splitPointTimeId splitPointId entryId elapsedDuration splitDateTime ## 1 123482 3615 21540 PT2M41.4S 2021-02-27T07:10:41.4 ## 2 123483 3601 21540 PT4M32.5S 2021-02-27T07:12:32.5 ## splitDateTimeLocal elapsedDurationS ## 1 2021-02-27T09:10:41.4+02:00 161.4 ## 2 2021-02-27T09:12:32.5+02:00 272.5 2.7.2 Wide Driver Split Times We can cast the data into a wide format, with splits ordered by their distance into the stage. Start by creating a function to help get the split point codes in order by distance along the stage: get_split_cols = function(splits){ split_cols = as.character(arrange(splits$splitPoints, distance)$splitPointId) split_cols } Now create a function to get the driver splits in a wide format using the order split point codes as the widened columns: get_driver_splits_wide = function(driver_splits, splits){ split_cols = get_split_cols(splits) splits_cols = c(&#39;entryId&#39;, &#39;splitPointId&#39;, &#39;elapsedDurationS&#39;) driver_splits_wide = driver_splits %&gt;% group_by(entryId) %&gt;% select(all_of(splits_cols)) %&gt;% tidyr::spread(key = splitPointId, value = elapsedDurationS) %&gt;% select(all_of(c(&#39;entryId&#39;, split_cols))) %&gt;% # If we don&#39;t cast, it&#39;s a # non-rankable rowwise df as.data.frame() driver_splits_wide } driver_splits_wide = get_driver_splits_wide(driver_splits, splits) driver_splits_wide %&gt;% head(2) ## entryId 3615 3601 3621 3617 3593 ## 1 21530 161.7 272.3 471.3 690.4 789.2 ## 2 21531 162.3 273.7 472.3 692.1 792.4 "]]
